%EZFKMIG f-k migration for plane wave imaging
% (Easy version)
%
% MIGHF = EZFKMIG(HFMAT,FS,PITCH) peHForms a f-k
% migration of the HF signals stored in the 2-D
% array HFMAT. MIGHF contains the migrated
% signals. FS and PITCH represent the sampling
% frequency (in Hz) and the pitch (in m) that
% were used to acquire the HF signals.
%
% The HF signals in HFMAT must have been
% acquired using a PLANE WAVE configuration with
% a linear array. Each column corresponds to a
% single HF signal over time acquired by a
% single transducer element.
%
% IMPORTANT NOTE:
% --------------
% EZFKMIG is a simplified and non-optimized
% version of FKMIG. The code has been simplified
% for academic purposes. It only works with
% horizontal plane waves generated by a linear
% array, without delay in reception. The number
% of options with EZFKMIG is also limited. Use
% FKMIG for a more general application.
%
% Reference
% ---------
% Garcia et al., Stolt’s f-k migration for plane
% wave ultrasound imaging. IEEE UFFC, 2013
%
% See also FKMIG
%
% -- Damien Garcia -- 2013
% website: <a
% href=”matlab:web(...
% ‘http://www.biomecardio.com’...
% )”>www.BiomeCardio.com</a>
%
% Modified by: Sajad S. Jazayeri, USF, Dec 2016
clear
close all
clc

[filenameInput,filepathInput]=uigetfile({'*.mat'}, 'Select Input File');
load(strcat(filepathInput,filenameInput))

if exist('dt','var') == 0
    dt = time(2)-time(1);
end

if exist('Ez','var') == 1
    HF = Ez;
else
    HF = Ez_real;
end
fs = 1/(dt*10^(-9)); 

prompt = {'Pitch Length', 'soil Perfmittivity','save migrated data 0 or 1'};
dlg_title = 'Pitch Input';
num_lines = 1;
defaultans = {'0.0125','5','0'};
fk_data = inputdlg(prompt,dlg_title,num_lines,defaultans); 

pitch = str2num(cell2mat((fk_data(1))));
perm_soil = str2num(cell2mat((fk_data(2))));
save_data = str2num(cell2mat((fk_data(3))));

[nt0,nx0] = size(HF);
% Zero-padding
nt = 2^(nextpow2(nt0)+1);
nx = 2*nx0;
% Exploding Reflector Model velocity
c = 3e8; % propagation velocity (m/s)

ERMv = (c/sqrt(perm_soil))/sqrt(2);
% FFT
fftHF = fftshift(fft2(HF,nt,nx));
% Linear interpolation
f = (-nt/2:nt/2-1)*fs/nt;
kx = (-nx/2:nx/2-1)/pitch/nx;
[kx,f] = meshgrid(kx,f);
fkz = ERMv*sign(f).*sqrt(kx.^2+f.^2/ERMv^2);
fftHF = interp2(kx,f,fftHF,kx,fkz,'linear',0);
% Jacobian (optional)
kz = (-nt/2:nt/2-1)'/ERMv/fs/nt;
fftHF = bsxfun(@times,fftHF,kz)./(fkz+eps);
% IFFT & Migrated HF
migHF = ifft2(ifftshift(fftHF),'symmetric');
migHF = migHF(1:nt0,1:nx0);

if save_data == 1
    save data_extraction_migrated.mat
end

%% plot
prompt = {'title','X_min','X_max','Time_min','Time_max','color'};
dlg_title = 'migration plotting Input';
num_lines = 2;
defaultans = {'Migration of GPR data on a pipe, 500 MHz', ...
    num2str(x(1)),num2str(x(end)),num2str(time(1)),num2str(round(time(end))),'jet'};
plotting_info = inputdlg(prompt,dlg_title,num_lines,defaultans); 



fig= imagesc (x,time,migHF); colormap(plotting_info{6}); %colorbar; 
title(plotting_info(1))
xlabel('X (m)')
ylabel('Time (ns)')
xlim([str2num(cell2mat((plotting_info(2)))) str2num(cell2mat((plotting_info(3))))])
ylim([str2num(cell2mat((plotting_info(4)))) str2num(cell2mat((plotting_info(5))))])


